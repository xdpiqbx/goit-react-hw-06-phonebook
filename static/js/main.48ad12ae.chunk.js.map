{"version":3,"sources":["App.module.scss","components/ContactList/ContactList.module.scss","components/Filter/Filter.module.scss","redux/actions.js","redux/reducers.js","redux/store.js","redux/selectors.js","components/ContactForm/ContactForm .js","components/Contact/Contact.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","reportWebVitals.js","index.js","components/ContactForm/ContactForm.module.scss","components/Contact/Contact.module.scss"],"names":["module","exports","addContact","createAction","deleteContact","filterContacts","initialState","contacts","items","JSON","parse","localStorage","getItem","filter","reducerContacts","createReducer","actions","state","action","payload","contactsFromLocalstorage","newContactList","contact","id","setItem","stringify","store","createStore","composeWithDevTools","getFilter","getAllContacts","ContactForm","useState","name","setName","number","setNumber","allContacts","useSelector","dispatch","useDispatch","addToLocalStorage","newContact","onChangeInputHandler","event","currentTarget","value","className","s","onSubmit","preventDefault","find","alert","getContact","uuidv4","ContactForm__title","ContactForm__input","type","onChange","ContactForm__btn","Contact","listItem","btn","onClick","ContactList","getFilteredContacts","length","list","map","toLowerCase","includes","protoTypes","PropTypes","objectOf","shape","string","func","Filter","container","target","App","AppContainer","contacts__title","filterHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48ad12ae.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppContainer\":\"App_AppContainer__3OaGt\",\"contacts__title\":\"App_contacts__title__19DDm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2dFB4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Filter_container__1R33W\"};","import { createAction } from '@reduxjs/toolkit';\n\nconst addContact = createAction('addContact');\nconst deleteContact = createAction('deleteContact');\nconst filterContacts = createAction('filterContacts');\n\n/* eslint-disable import/no-anonymous-default-export */\n// import type from './types'\n\n// const addContact = contact => ({\n//   type: type.ADD_CONTACT,\n//   payload: contact,\n// });\n\n// const deleteContact = id => ({\n//   type: type.DELETE_CONTACT,\n//   payload: id,\n// });\n\n// const filterContacts = value => ({\n//   type: type.FILTER_CONTACTS,\n//   payload: value,\n// });\n\nexport default { addContact, filterContacts, deleteContact };\n","import { createReducer } from '@reduxjs/toolkit';\nimport actions from './actions';\n\nconst initialState = {\n  contacts: {\n    items: [...(JSON.parse(localStorage.getItem('contacts')) ?? [])],\n    filter: '',\n  },\n};\n\nconst reducerContacts = createReducer(initialState, {\n  [actions.addContact]: (state, action) => ({\n    contacts: {\n      items: [action.payload, ...state.contacts.items],\n      filter: state.contacts.filter,\n    },\n  }),\n\n  [actions.filterContacts]: (state, action) => ({\n    contacts: {\n      items: state.contacts.items,\n      filter: action.payload,\n    },\n  }),\n\n  [actions.deleteContact]: (state, action) => {\n    const contactsFromLocalstorage = localStorage.getItem('contacts');\n    const newContactList = JSON.parse(contactsFromLocalstorage).filter(\n      contact => contact.id !== action.payload,\n    );\n    localStorage.setItem('contacts', JSON.stringify(newContactList));\n    return {\n      contacts: {\n        items: newContactList,\n        filter: state.contacts.filter,\n      },\n    };\n  },\n});\n\n/*--------------------------------------------------------------------*/\n\n// import type from './types';\n\n// const reducerContacts = (state = initialState, action) => {\n//   switch (action.type) {\n//     case type.ADD_CONTACT:\n//       return {\n//         contacts: {\n//           items: [action.payload, ...state.contacts.items],\n//           filter: state.contacts.filter,\n//         },\n//       };\n//     case type.DELETE_CONTACT:\n//       const contactsFromLocalstorage = localStorage.getItem('contacts');\n//       const newContactList = JSON.parse(contactsFromLocalstorage).filter(\n//         contact => contact.id !== action.payload,\n//       );\n//       localStorage.setItem('contacts', JSON.stringify(newContactList));\n//       return {\n//         contacts: {\n//           items: newContactList,\n//           filter: state.contacts.filter,\n//         },\n//       };\n//     case type.FILTER_CONTACTS:\n//       return {\n//         contacts: {\n//           items: state.contacts.items,\n//           filter: action.payload,\n//         },\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\nexport default reducerContacts;\n","import { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducerContacts from './reducers';\n\nconst store = createStore(reducerContacts, composeWithDevTools());\n\nexport default store;\n","export const getFilter = state => state.contacts.filter\r\nexport const getAllContacts = state => state.contacts.items\r\n\r\n//Можно еще так\r\n// export const getFilteredContacts = (state) => {\r\n//     const filter = getFilter\r\n//     const contacts = getAllContacts\r\n//     if (filter) {\r\n//       return contacts.filter(contact =>\r\n//         contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n//       );\r\n//     } else {\r\n//       return contacts;\r\n//     }\r\n// };","import PropTypes from 'prop-types';\n\nimport React, { useState } from 'react';\n\nimport {useSelector, useDispatch} from 'react-redux'\n// import { connect } from 'react-redux';\nimport actions from '../../redux/actions';\nimport {getAllContacts} from '../../redux/selectors'\n\nimport s from './ContactForm.module.scss';\n\nimport { v4 as uuidv4 } from 'uuid';\n\n// const ContactForm = ({ allContacts, addContactToStore }) => {\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const allContacts = useSelector(getAllContacts)\n  const dispatch = useDispatch()\n\n  const getContact = newContact => {\n    if (allContacts) {\n      const res = allContacts.find(contact => contact.name === newContact.name);\n      if (res) {\n        alert(`${newContact.name} is already in contacts`);\n        return;\n      }\n    }\n    addToLocalStorage(newContact);\n    // addContactToStore(newContact);\n    dispatch(actions.addContact(newContact))\n  };\n\n  const addToLocalStorage = newContact => {\n    const contactsFromLocalstorage = localStorage.getItem('contacts');\n    localStorage.setItem(\n      'contacts',\n      JSON.stringify([\n        newContact,\n        ...(JSON.parse(contactsFromLocalstorage) ?? []),\n      ]),\n    );\n  };\n\n  const onSubmitHandler = event => {\n    event.preventDefault();\n    if (name && number) {\n      getContact({\n        id: uuidv4(),\n        name,\n        number,\n      });\n    }\n    setName('');\n    setNumber('');\n  };\n\n  const onChangeInputHandler = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        return;\n      case 'number':\n        setNumber(value);\n        return;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <div className={s.ContactForm}>\n      <form onSubmit={onSubmitHandler}>\n        <label>\n          <span className={s.ContactForm__title}>Name</span>\n          <input\n            className={s.ContactForm__input}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={onChangeInputHandler}\n          />\n        </label>\n        <label>\n          <span className={s.ContactForm__title}>Phone</span>\n          <input\n            className={s.ContactForm__input}\n            type=\"text\"\n            name=\"number\"\n            value={number}\n            onChange={onChangeInputHandler}\n          />\n        </label>\n        <button className={s.ContactForm__btn} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n};\n\n// const mapStateToProps = state => ({\n//   allContacts: state.contacts.items,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   addContactToStore: contact => dispatch(actions.addContact(contact)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\nexport default ContactForm;\n\nContactForm.propTypes = {\n  getContact: PropTypes.func,\n  onSubmitHandler: PropTypes.func,\n  onChangeInputHandler: PropTypes.func,\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport s from './Contact.module.scss';\n\nconst Contact = ({ contact, deleteContact }) => {\n  return (\n    <li className={s.listItem}>\n      <span className={s.name}>{contact.name}: </span>\n      <span className={s.number}>{contact.number}</span>\n      <button\n        className={s.btn}\n        type=\"button\"\n        onClick={() => deleteContact(contact.id)}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nexport default Contact;\n\nContact.propTypes = {\n  contact: PropTypes.object,\n  deleteContact: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\n\nimport {useSelector, useDispatch} from 'react-redux'\n// import { connect } from 'react-redux';\nimport actions from '../../redux/actions';\nimport {getFilter, getAllContacts} from '../../redux/selectors'\n\nimport Contact from '../Contact';\n\nimport s from './ContactList.module.scss';\n\n// const ContactList = ({ contacts, deleteContact }) => {\nconst ContactList = () => {\n  // const contacts = useSelector(({contacts}) => getFilteredContacts(contacts.items, contacts.filter))\n  const contacts = useSelector(state => getFilteredContacts(getAllContacts(state), getFilter(state)))\n  const dispatch = useDispatch()\n  if (contacts.length > 0) {\n    return (\n      <ul className={s.list}>\n        {contacts.map(contact => (\n          <Contact\n            contact={contact}\n            // deleteContact={deleteContact}\n            deleteContact={() => dispatch(actions.deleteContact(contact.id))}\n            key={contact.id}\n          />\n        ))}\n      </ul>\n    );\n  } else {\n    return <h2>There is no contacts</h2>;\n  }\n};\n\nconst getFilteredContacts = (contacts, filter) => {\n  if (filter) {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  } else {\n    return contacts;\n  }\n};\n\n// const mapStateToProps = ({ contacts }) => ({\n//   contacts: getFilteredContacts(contacts.items, contacts.filter),\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   deleteContact: id => dispatch(actions.deleteContact(id)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\nexport default ContactList;\n\nContactList.protoTypes = {\n  contacts: PropTypes.objectOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      number: PropTypes.string,\n      id: PropTypes.string,\n    }),\n  ),\n  deleteContact: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n// import { connect } from 'react-redux';\nimport actions from '../../redux/actions';\nimport {getFilter} from '../../redux/selectors'\n\nimport s from './Filter.module.scss';\n\n// const Filter = ({ filter, filterHandler }) => {\nconst Filter = () => {\n  // const filter = useSelector(state => state.contacts.filter);\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n  return (\n    <div className={s.container}>\n      <h3>Find contacts by name</h3>\n      {/* <input name=\"filter\" value={filter} onChange={filterHandler} /> */}\n      <input\n        name=\"filter\"\n        value={filter}\n        onChange={event => dispatch(actions.filterContacts(event.target.value))}\n      />\n    </div>\n  );\n};\n\n// const mapStateToProps = ({ contacts }) => ({\n//   filter: contacts.filter,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   filterHandler: event => dispatch(actions.filterContacts(event.target.value)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\nexport default Filter;\n\nFilter.protoTypes = {\n  filter: PropTypes.string,\n  filterHandler: PropTypes.func,\n};\n","import s from './App.module.scss';\nimport ContactForm from './components/ContactForm/ContactForm ';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\n\nexport default function App() {\n  return (\n    <div className={s.AppContainer}>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2 className={s.contacts__title}>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactForm\":\"ContactForm_ContactForm__gdSvm\",\"ContactForm__title\":\"ContactForm_ContactForm__title__3Oi3o\",\"ContactForm__input\":\"ContactForm_ContactForm__input__2kim1\",\"ContactForm__btn\":\"ContactForm_ContactForm__btn__bvlcv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"Contact_listItem__XPHZi\",\"name\":\"Contact_name__2Ei1v\",\"btn\":\"Contact_btn__DuFKP\"};"],"sourceRoot":""}